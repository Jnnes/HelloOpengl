#ifndef FILESYSTEM_H
#define FILESYSTEM_H

#include <string>
#include <cstdlib>
//#include "root_directory.h" // This is a configuration file generated by CMake.

class FileSystem
{
private:
  typedef std::string (*Builder) (const std::string& path);

public:
  static std::string getPath(const std::string& path)
  {
    /*static std::string(*pathBuilder)(std::string const &) = getPathBuilder();
    return (*pathBuilder)(path);*/
      char *runPath = new char[256];
      _get_pgmptr(&runPath);
      std::string dirStr(runPath);

      while (dirStr.find('\\') != dirStr.npos) {
          size_t index = dirStr.find('\\');
          dirStr[index] = '/';
      }

      // Õ˘…œ¡Ωº∂
      for (unsigned int i = 0; i < 2; i++) {
          size_t index = dirStr.find_last_of('/');
          if (index != dirStr.npos)
              dirStr = dirStr.substr(0, index);
          else
              break;
      }

      return dirStr + "/" + path;
  }

//private:
//  static std::string const & getRoot()
//  {
//    static char const * envRoot = getenv("LOGL_ROOT_PATH");
//    static char const * givenRoot = (envRoot != nullptr ? envRoot : logl_root);
//    static std::string root = (givenRoot != nullptr ? givenRoot : "");
//    return root;
//  }
//
//  //static std::string(*foo (std::string const &)) getPathBuilder()
//  static Builder getPathBuilder()
//  {
//    if (getRoot() != "")
//      return &FileSystem::getPathRelativeRoot;
//    else
//      return &FileSystem::getPathRelativeBinary;
//  }
//
//  static std::string getPathRelativeRoot(const std::string& path)
//  {
//    return getRoot() + std::string("/") + path;
//  }
//
//  static std::string getPathRelativeBinary(const std::string& path)
//  {
//    return "../../../" + path;
//  }


};

// FILESYSTEM_H
#endif
